% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/species_mix-class.R
\name{species_mix}
\alias{control}
\alias{species_mix}
\alias{species_mix.control}
\alias{species_mix.fit}
\alias{species_mix.predict}
\title{species_mix objects}
\usage{
species_mix(formula = NULL, data, n_mixtures = 3,
  distribution = "poisson", offset = NULL, weights = NULL,
  control = species_mix.control(), inits = NULL, standardise = FALSE)

species_mix.fit(y, X, G, weights, offset, distribution, control,
  y_is_na = NULL)

species_mix.control(maxit = 500, quiet = FALSE, trace = 1,
  reltol = reltol_fun, cores = 4, em.prefit = TRUE, em.steps = 3,
  em.refit = 1, est.var = FALSE, ...)

species_mix.predict(object, new_obs, ...)
}
\arguments{
\item{formula}{an object of class "formula" (or an object that can be coerced to that class).
The response variable (left hand side of the formula) needs to be either 'presence', 'occurrence', 'abundance', 'biomass' or 'quantity' this will help specify the type of data to be modelled, if the response variable is disperate to the model distribution an error will be thrown. The dependent variables (the right hind side) of this formula specifies the dependence of the species archetype probabilities on covariates. An example formula follows something like this: cbind(spp1,spp2,spp3)~1+temperature+rainfall}

\item{n_mixtures}{The number of mixing components (groups) to fit.}

\item{distribution}{The family of statistical distribution to use within the ecomix models. a  choice between "bernoulli", "poisson", "ipp" (inhomogeneous point process), "negative_binomial", "tweedie" and "gaussian" distributions are possible and applicable to specific types of data.}

\item{offset}{a numeric vector of length nrow(data) that is included into the model as an offset. It is included into the conditional part of the model where conditioning is performed on the SAM.}

\item{weights}{a numeric vector of length nrow(data) that is used as weights in the log-likelihood calculations. If NULL (default) then all weights are assumed to be identically 1. For ipp distribution - weights must be a nrow(data)*n_species matrix, which provides a species-specific background weights used to estimate the species-specific marginal likelihood.}

\item{control}{a list of control parameters for optimisation and calculation. See details. From \code{species_mix.control} for details on optimistaion parameters.}

\item{inits}{NULL a numeric vector that provides approximate starting values for species_mix coefficents. These are distribution specific, but as a minimum you'll need pis, alphas (intercepts) and betas.}

\item{y}{is a matrix genertated from \link[stats]{model.response} containing the species information. The matrix has the dimensions n_sites * n_species.}

\item{X}{is a design matrix of dimension n_sites * n_covariates.}

\item{G}{is the number of species archetypes that are being estimated.}

\item{y_is_na}{This is a logical matrix used specifically with 'ipp' modelling - don't worry about this, it'll be worked out for you. Yay!}

\item{maxit}{Maximum number of evaluations of the objective function allowed. Defaults to 500.}

\item{trace}{int 1=model will report parameter estimates and loglikelihood at each iteration. 0=quite.}

\item{reltol}{function that determines the relative tolernace for model convergence. Default is quite strict.}

\item{cores}{The number of cores to use in fitting of species mix models. These will be largely used to model the species-specific parameteres.}

\item{em.prefit}{Logical if TRUE the model will run a slower EM algorithim fit to find starting values.}

\item{em.steps}{int Default is 3, the number of EM iterations to get to starting values.}

\item{em.refit}{int Default is 1, number of times to refit using EM.}

\item{est.var}{logical if TRUE model will numerically estimate the variance covariance matrix.}

\item{object}{is a matrix model returned from the species_mix model.}

\item{new_obs}{a matrix of new observations for prediction.}

\item{model_data}{a List which contains named objects 'species_data': a data frame containing the species information. The frame is arranged so that each row is a site and each column is a species. Species names should be included as column names otherwise numbers from 1:S are assigned. And 'covariate_data' a data frame containng the covariate data for each site. Names of columns must match that given in \code{formula}.}

\item{weights}{is used in alternative way depending on the error distribution used. See \link[ecomix]{species_mix} for more details.}

\item{distribution}{the error distribution to used in species_mix estimation. Currently, 'bernoulli', 'poisson', 'ipp' (Poisson point process), 'negative_binomial' and 'tweedie' are avaliable.}

\item{offset}{this is a vector of site specific offsets, this might be something like area sampled at sites.}

\item{control}{this is a list of control parameters that alter the specifics of model fitting. See \link[ecomix]{species_mix.control} for details.}

\item{quite}{Should any reporting be performed? Default is FALSE, for reporting.}

\item{residuals}{logical if TRUE model will estimate residuals.}
}
\description{
Fits a finite mixture model to identify species archetype models (SAMs).

Predicts SAM probabilities at a series of sites. Confidence intervals can be calculated if variance-covariance matrix is estimated during species_mix model fit.
}
\details{
species_mix is used to fit mixtures of glms to multivariate species data. The function uses BFGS to optimise the mixture likelihood. There is the option to use EM get appropriate starting parameters. Species acts as a wrapper for fitmix.cpp that allows for easier data input. The data frames are merged into the appropriate format for the use in fitmix.cpp. Minima is found using vmmin (BFGS) and the gradients are calculated using CPPAD (auto differentiation)
}
\examples{
simulated_data <- simulate_species_mix_data()
form <- cbind(spp1,spp2,spp3) ~ 1 + x1 + x2 + x3
model_data <- make_mixture_data(species_data = Y, covariate_data = X)
fm_species_mix <- species_mix(formula,model_data=model_data,distribution='bernoulli',n_mixtures=5)
fm1 <- species_mix(form,data)
preds_fm1 <- predict(fm1,newdata)
}

